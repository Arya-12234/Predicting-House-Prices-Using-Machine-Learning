# -*- coding: utf-8 -*-
"""Predicting House Prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZlH9S8IyzuXMjOaNDfClf63dam6sGgif
"""

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 2: Load the dataset
df = pd.read_csv('/content/housing_price_dataset.csv')

# Step 3: Explore the dataset
print(df.info())
print(df.describe())

# Visualize the distribution of the target variable (Price)
plt.figure(figsize=(8,6))
sns.histplot(df['Price'], kde=True, color='blue')
plt.title('Distribution of House Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

# Scatter plot: Square Feet vs. Price
plt.figure(figsize=(8,6))
plt.scatter(df['SquareFeet'], df['Price'], alpha=0.5)
plt.title('Square Feet vs. Price')
plt.xlabel('Square Feet')
plt.ylabel('Price')
plt.show()

# Pairplot for relationships between features
sns.pairplot(df)
plt.show()

# Step 4: Preprocessing the data (One-hot encode the categorical variable)
df = pd.get_dummies(df, columns=['Neighborhood'], drop_first=True)

# Define feature matrix X and target variable y
X = df.drop('Price', axis=1)  # Features
y = df['Price']  # Target variable (Price)

# Step 5: Split the data into training and test sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train a Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Step 7: Make predictions on the test set
y_pred = rf_model.predict(X_test)

# Step 8: Evaluate the model's performance
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print out evaluation metrics
print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared (R2 Score): {r2}')

# Step 9: Visualize model performance

# 1. Residual Plot
residuals = y_test - y_pred
plt.figure(figsize=(8,6))
plt.scatter(y_pred, residuals, alpha=0.5)
plt.hlines(y=0, xmin=min(y_pred), xmax=max(y_pred), colors='red', linestyles='dashed')
plt.title('Residual Plot')
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals (Actual - Predicted)')
plt.show()

# 2. Actual vs Predicted Prices
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.title('Actual vs Predicted Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.show()

# 3. Feature Importance (for Random Forest)
importances = rf_model.feature_importances_
features = X.columns

# Create a DataFrame to hold feature importance values
feat_importances = pd.DataFrame(importances, index=features, columns=["Importance"]).sort_values(by="Importance", ascending=False)

# Plot the feature importances
plt.figure(figsize=(10,6))
sns.barplot(x=feat_importances['Importance'], y=feat_importances.index, palette='viridis')
plt.title('Feature Importance')
plt.show()